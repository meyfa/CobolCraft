IDENTIFICATION DIVISION.
PROGRAM-ID. Codegen-TemplateRead.

DATA DIVISION.
WORKING-STORAGE SECTION.
    01 FAILURE                      BINARY-CHAR UNSIGNED.
    01 IDX                          BINARY-LONG UNSIGNED.
    01 IDX2                         BINARY-LONG UNSIGNED.
LINKAGE SECTION.
    01 LK-TPLDIR                    PIC X ANY LENGTH.
    01 LK-TPLNAME                   PIC X ANY LENGTH.
    01 LK-TPL.
        COPY DD-CODEGEN-TEMPLATE REPLACING LEADING ==PREFIX== BY ==LK==.

PROCEDURE DIVISION USING LK-TPLDIR LK-TPLNAME LK-TPL.
    INITIALIZE LK-TPL-FILENAME
    STRING FUNCTION TRIM(LK-TPLDIR) "/" FUNCTION TRIM(LK-TPLNAME) INTO LK-TPL-FILENAME

    CALL "Files-ReadAll" USING LK-TPL-FILENAME LK-TPL-BUFFER LK-TPL-LENGTH FAILURE
    COPY ASSERT REPLACING COND BY ==FAILURE = 0==,
        MSG BY =="Codegen: Failed to read template: " FUNCTION TRIM(LK-TPL-FILENAME)==.

    MOVE 0 TO LK-TPL-VARS

    PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > LK-TPL-LENGTH
        IF LK-TPL-BUFFER(IDX:1) = "$"
            *> find the closing "$"
            COMPUTE IDX2 = IDX + 1
            PERFORM UNTIL IDX2 > LK-TPL-LENGTH OR LK-TPL-BUFFER(IDX2:1) = "$"
                ADD 1 TO IDX2
            END-PERFORM

            ADD 1 TO LK-TPL-VARS
            MOVE LK-TPL-BUFFER(IDX + 1:IDX2 - IDX - 1) TO LK-TPL-VAR-NAME(LK-TPL-VARS)
            MOVE IDX TO LK-TPL-VAR-START(LK-TPL-VARS)
            MOVE IDX2 TO LK-TPL-VAR-END(LK-TPL-VARS)

            MOVE IDX2 TO IDX
        END-IF
    END-PERFORM

    GOBACK.

END PROGRAM Codegen-TemplateRead.

IDENTIFICATION DIVISION.
PROGRAM-ID. Codegen-TemplateEval IS RECURSIVE.

DATA DIVISION.
LOCAL-STORAGE SECTION.
    01 TEMPLATE-POSITION            BINARY-LONG UNSIGNED        VALUE 1.
    01 COPY-COUNT                   BINARY-LONG UNSIGNED.
    01 VAR-INDEX                    BINARY-LONG UNSIGNED.
LINKAGE SECTION.
    *> input template
    01 LK-TPL.
        COPY DD-CODEGEN-TEMPLATE REPLACING LEADING ==PREFIX== BY ==LK==.
    *> Callback: LK-VARNAME -> LK-VALUE, LK-LENGTH
    01 LK-REPLACE-PTR               PROGRAM-POINTER.
    *> output buffer
    01 LK-OUT-BUFFER                PIC X ANY LENGTH.
    01 LK-OUT-LENGTH                BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-TPL LK-REPLACE-PTR LK-OUT-BUFFER LK-OUT-LENGTH.
    PERFORM VARYING VAR-INDEX FROM 1 BY 1 UNTIL VAR-INDEX > LK-TPL-VARS
        *> copy until the beginning of the variable
        COMPUTE COPY-COUNT = LK-TPL-VAR-START(VAR-INDEX) - TEMPLATE-POSITION
        MOVE LK-TPL-BUFFER(TEMPLATE-POSITION:COPY-COUNT) TO LK-OUT-BUFFER(LK-OUT-LENGTH + 1:COPY-COUNT)
        ADD COPY-COUNT TO LK-OUT-LENGTH

        *> replace the variable
        CALL LK-REPLACE-PTR USING LK-TPL-VAR-NAME(VAR-INDEX) LK-OUT-BUFFER LK-OUT-LENGTH

        *> move to after the variable
        COMPUTE TEMPLATE-POSITION = LK-TPL-VAR-END(VAR-INDEX) + 1
    END-PERFORM

    *> no more variables, copy the remaining template to the output
    IF TEMPLATE-POSITION < LK-TPL-LENGTH
        COMPUTE COPY-COUNT = LK-TPL-LENGTH - TEMPLATE-POSITION + 1
        MOVE LK-TPL-BUFFER(TEMPLATE-POSITION:COPY-COUNT) TO LK-OUT-BUFFER(LK-OUT-LENGTH + 1:COPY-COUNT)
        ADD COPY-COUNT TO LK-OUT-LENGTH
    END-IF

    GOBACK.

END PROGRAM Codegen-TemplateEval.
