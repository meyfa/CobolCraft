*> --- Registries-Create ---
*> Create a new, empty registry. The registry will be assigned the next available ID.
IDENTIFICATION DIVISION.
PROGRAM-ID. Registries-Create.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-REGISTRIES.
LINKAGE SECTION.
    01 LK-REGISTRY-NAME         PIC X ANY LENGTH.
    01 LK-PACKET-REQUIRED       BINARY-CHAR UNSIGNED.

PROCEDURE DIVISION USING LK-REGISTRY-NAME LK-PACKET-REQUIRED.
    *> We can presume that (count = max_id + 1) is always true, hence using the current count as the next ID.
    ADD 1 TO REGISTRY-COUNT
    MOVE LK-REGISTRY-NAME TO REGISTRY-NAME(REGISTRY-COUNT)
    MOVE LK-PACKET-REQUIRED TO REGISTRY-REQUIRES-PACKET(REGISTRY-COUNT)
    GOBACK.

END PROGRAM Registries-Create.

*> --- Registries-CreateEntry ---
*> Create a new entry in a registry. The entry will be assigned the next available ID.
IDENTIFICATION DIVISION.
PROGRAM-ID. Registries-CreateEntry.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-REGISTRIES.
    01 IDX                      BINARY-LONG.
LINKAGE SECTION.
    01 LK-REGISTRY-ID           BINARY-LONG.
    01 LK-ENTRY-NAME            PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-REGISTRY-ID LK-ENTRY-NAME.
    COMPUTE IDX = LK-REGISTRY-ID + 1
    ADD 1 TO REGISTRY-ENTRY-COUNT(IDX)
    MOVE LK-ENTRY-NAME TO REGISTRY-ENTRY-NAME(IDX, REGISTRY-ENTRY-COUNT(IDX))
    GOBACK.

END PROGRAM Registries-CreateEntry.

*> --- Registries-Count ---
*> Get the number of registries. Incidentally, this is also one greater than the highest registry ID.
IDENTIFICATION DIVISION.
PROGRAM-ID. Registries-Count.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-REGISTRIES.
LINKAGE SECTION.
    01 LK-REGISTRY-COUNT        BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-REGISTRY-COUNT.
    MOVE REGISTRY-COUNT TO LK-REGISTRY-COUNT
    GOBACK.

END PROGRAM Registries-Count.

*> --- Registries-EntryCount ---
*> Get the number of entries in a registry by its ID.
IDENTIFICATION DIVISION.
PROGRAM-ID. Registries-EntryCount.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-REGISTRIES.
LINKAGE SECTION.
    01 LK-REGISTRY-ID           BINARY-LONG.
    01 LK-ENTRY-COUNT           BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-REGISTRY-ID LK-ENTRY-COUNT.
    MOVE REGISTRY-ENTRY-COUNT(LK-REGISTRY-ID + 1) TO LK-ENTRY-COUNT
    GOBACK.

END PROGRAM Registries-EntryCount.

*> --- Registries-Name ---
*> Get the name of a registry by its zero-based ID.
IDENTIFICATION DIVISION.
PROGRAM-ID. Registries-Name.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-REGISTRIES.
LINKAGE SECTION.
    01 LK-REGISTRY-ID           BINARY-LONG.
    01 LK-REGISTRY-NAME         PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-REGISTRY-ID LK-REGISTRY-NAME.
    MOVE REGISTRY-NAME(LK-REGISTRY-ID + 1) TO LK-REGISTRY-NAME
    GOBACK.

END PROGRAM Registries-Name.

*> --- Registries-EntryName ---
*> Get the name of an entry by its zero-based ID.
IDENTIFICATION DIVISION.
PROGRAM-ID. Registries-EntryName.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-REGISTRIES.
LINKAGE SECTION.
    01 LK-REGISTRY-ID           BINARY-LONG.
    01 LK-ENTRY-ID              BINARY-LONG.
    01 LK-ENTRY-NAME            PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-REGISTRY-ID LK-ENTRY-ID LK-ENTRY-NAME.
    MOVE REGISTRY-ENTRY-NAME(LK-REGISTRY-ID + 1, LK-ENTRY-ID + 1) TO LK-ENTRY-NAME
    GOBACK.

END PROGRAM Registries-EntryName.

*> --- Registries-LookupRegistry ---
*> Get the zero-based ID of a registry by its name. Negative values indicate failure.
IDENTIFICATION DIVISION.
PROGRAM-ID. Registries-LookupRegistry.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-REGISTRIES.
    01 IDX                      BINARY-LONG UNSIGNED.
LINKAGE SECTION.
    01 LK-REGISTRY-NAME         PIC X ANY LENGTH.
    01 LK-REGISTRY-ID           BINARY-LONG.

PROCEDURE DIVISION USING LK-REGISTRY-NAME LK-REGISTRY-ID.
    PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > REGISTRY-COUNT
        IF LK-REGISTRY-NAME = REGISTRY-NAME(IDX)
            COMPUTE LK-REGISTRY-ID = IDX - 1
            GOBACK
        END-IF
    END-PERFORM
    MOVE -1 TO LK-REGISTRY-ID
    GOBACK.

END PROGRAM Registries-LookupRegistry.

*> --- Registries-Lookup ---
*> Get the zero-based ID of an entry by its registry's name and the entry's name. Negative values indicate failure.
IDENTIFICATION DIVISION.
PROGRAM-ID. Registries-Lookup.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-REGISTRIES.
    01 IDX-REGISTRY             BINARY-LONG UNSIGNED.
    01 IDX-ENTRY                BINARY-LONG UNSIGNED.
LINKAGE SECTION.
    01 LK-REGISTRY-NAME         PIC X ANY LENGTH.
    01 LK-ENTRY-NAME            PIC X ANY LENGTH.
    01 LK-ENTRY-ID              BINARY-LONG.

PROCEDURE DIVISION USING LK-REGISTRY-NAME LK-ENTRY-NAME LK-ENTRY-ID.
    PERFORM VARYING IDX-REGISTRY FROM 1 BY 1 UNTIL IDX-REGISTRY > REGISTRY-COUNT
        IF LK-REGISTRY-NAME = REGISTRY-NAME(IDX-REGISTRY)
            PERFORM VARYING IDX-ENTRY FROM 1 BY 1 UNTIL IDX-ENTRY > REGISTRY-ENTRY-COUNT(IDX-REGISTRY)
                IF LK-ENTRY-NAME = REGISTRY-ENTRY-NAME(IDX-REGISTRY, IDX-ENTRY)
                    COMPUTE LK-ENTRY-ID = IDX-ENTRY - 1
                    GOBACK
                END-IF
            END-PERFORM
            EXIT PERFORM
        END-IF
    END-PERFORM
    MOVE -1 TO LK-ENTRY-ID
    GOBACK.

END PROGRAM Registries-Lookup.

*> --- Registries-RequiresPacket ---
*> Get whether a registry requires a packet by its ID.
IDENTIFICATION DIVISION.
PROGRAM-ID. Registries-RequiresPacket.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-REGISTRIES.
LINKAGE SECTION.
    01 LK-REGISTRY-ID           BINARY-LONG.
    01 LK-REQUIRES-PACKET       BINARY-CHAR UNSIGNED.

PROCEDURE DIVISION USING LK-REGISTRY-ID LK-REQUIRES-PACKET.
    MOVE REGISTRY-REQUIRES-PACKET(LK-REGISTRY-ID + 1) TO LK-REQUIRES-PACKET
    GOBACK.

END PROGRAM Registries-RequiresPacket.
