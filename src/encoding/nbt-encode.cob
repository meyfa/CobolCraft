*> --- NbtEncode-WriteString ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-WriteString.

DATA DIVISION.
WORKING-STORAGE SECTION.
    01 UINT16           BINARY-SHORT UNSIGNED.
LINKAGE SECTION.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-OFFSET        BINARY-LONG UNSIGNED.
    01 LK-STRING        PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-BUFFER LK-OFFSET LK-STRING.
    *> string length
    MOVE LENGTH OF LK-STRING TO UINT16
    CALL "Encode-UnsignedShort" USING UINT16 LK-BUFFER LK-OFFSET
    *> string value
    MOVE LK-STRING TO LK-BUFFER(LK-OFFSET:UINT16)
    ADD UINT16 TO LK-OFFSET
    GOBACK.

END PROGRAM NbtEncode-WriteString.

*> --- NbtEncode-Byte ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-Byte.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-VALUE         BINARY-CHAR.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-VALUE.
    EVALUATE TRUE
        *> If the parent element is a list, update its type and count.
        WHEN LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
            MOVE X"01" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
            ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
        *> If the parent element is a matching array type, count down.
        WHEN LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"07"
            SUBTRACT 1 FROM LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
            *> Pop the array once the count reaches 0.
            IF LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL) = 0
                SUBTRACT 1 FROM LK-NBTENC-LEVEL
            END-IF
        *> Write the tag.
        WHEN OTHER
            MOVE X"01" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
            ADD 1 TO LK-NBTENC-OFFSET
            IF LK-NAME IS NOT OMITTED
                CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
            END-IF
    END-EVALUATE

    *> value
    CALL "Encode-Byte" USING LK-VALUE LK-BUFFER LK-NBTENC-OFFSET
    GOBACK.

END PROGRAM NbtEncode-Byte.

*> --- NbtEncode-Short ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-Short.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-VALUE         BINARY-SHORT.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-VALUE.
    EVALUATE TRUE
        *> If the parent element is a list, update its type and count.
        WHEN LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
            MOVE X"02" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
            ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
        *> Write the tag.
        WHEN OTHER
            MOVE X"02" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
            ADD 1 TO LK-NBTENC-OFFSET
            IF LK-NAME IS NOT OMITTED
                CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
            END-IF
    END-EVALUATE

    *> value
    CALL "Encode-Short" USING LK-VALUE LK-BUFFER LK-NBTENC-OFFSET
    GOBACK.

END PROGRAM NbtEncode-Short.

*> --- NbtEncode-Int ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-Int.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-VALUE         BINARY-LONG.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-VALUE.
    EVALUATE TRUE
        *> If the parent element is a list, update its type and count.
        WHEN LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
            MOVE X"03" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
            ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
        *> If the parent element is a matching array type, count down.
        WHEN LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"0B"
            SUBTRACT 1 FROM LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
            *> Pop the array once the count reaches 0.
            IF LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL) = 0
                SUBTRACT 1 FROM LK-NBTENC-LEVEL
            END-IF
        *> Write the tag.
        WHEN OTHER
            MOVE X"03" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
            ADD 1 TO LK-NBTENC-OFFSET
            IF LK-NAME IS NOT OMITTED
                CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
            END-IF
    END-EVALUATE

    *> value
    CALL "Encode-Int" USING LK-VALUE LK-BUFFER LK-NBTENC-OFFSET
    GOBACK.

END PROGRAM NbtEncode-Int.

*> --- NbtEncode-Long ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-Long.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-VALUE         BINARY-LONG-LONG.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-VALUE.
    EVALUATE TRUE
        *> If the parent element is a list, update its type and count.
        WHEN LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
            MOVE X"04" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
            ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
        *> If the parent element is a matching array type, count down.
        WHEN LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"0C"
            SUBTRACT 1 FROM LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
            *> Pop the array once the count reaches 0.
            IF LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL) = 0
                SUBTRACT 1 FROM LK-NBTENC-LEVEL
            END-IF
        *> Write the tag.
        WHEN OTHER
            MOVE X"04" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
            ADD 1 TO LK-NBTENC-OFFSET
            IF LK-NAME IS NOT OMITTED
                CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
            END-IF
    END-EVALUATE

    *> value
    CALL "Encode-Long" USING LK-VALUE LK-BUFFER LK-NBTENC-OFFSET
    GOBACK.

END PROGRAM NbtEncode-Long.

*> --- NbtEncode-Float ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-Float.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-VALUE         FLOAT-SHORT.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-VALUE.
    *> If the parent element is a list, update its type and count.
    IF LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
        MOVE X"05" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    ELSE
        *> Write the tag.
        MOVE X"05" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
        ADD 1 TO LK-NBTENC-OFFSET
        IF LK-NAME IS NOT OMITTED
            CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
        END-IF
    END-IF

    *> value
    CALL "Encode-Float" USING LK-VALUE LK-BUFFER LK-NBTENC-OFFSET
    GOBACK.

END PROGRAM NbtEncode-Float.

*> --- NbtEncode-Double ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-Double.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-VALUE         FLOAT-LONG.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-VALUE.
    *> If the parent element is a list, update its type and count.
    IF LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
        MOVE X"06" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    ELSE
        *> Write the tag.
        MOVE X"06" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
        ADD 1 TO LK-NBTENC-OFFSET
        IF LK-NAME IS NOT OMITTED
            CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
        END-IF
    END-IF

    *> value
    CALL "Encode-Double" USING LK-VALUE LK-BUFFER LK-NBTENC-OFFSET
    GOBACK.

END PROGRAM NbtEncode-Double.

*> --- NbtEncode-String ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-String.

DATA DIVISION.
WORKING-STORAGE SECTION.
    01 UINT16           BINARY-SHORT UNSIGNED.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-VALUE         PIC X ANY LENGTH.
    01 LK-VALUE-LEN     BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-VALUE LK-VALUE-LEN.
    *> If the parent element is a list, update its type and count.
    IF LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
        MOVE X"08" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    ELSE
        *> Write the tag.
        MOVE X"08" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
        ADD 1 TO LK-NBTENC-OFFSET
        IF LK-NAME IS NOT OMITTED
            CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
        END-IF
    END-IF

    *> length
    MOVE LK-VALUE-LEN TO UINT16
    CALL "Encode-UnsignedShort" USING UINT16 LK-BUFFER LK-NBTENC-OFFSET

    *> value
    MOVE LK-VALUE(1:LK-VALUE-LEN) TO LK-BUFFER(LK-NBTENC-OFFSET:LK-VALUE-LEN)
    ADD LK-VALUE-LEN TO LK-NBTENC-OFFSET

    GOBACK.

END PROGRAM NbtEncode-String.

*> --- NbtEncode-ByteArray ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-ByteArray.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-ARRAY-LEN     BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-ARRAY-LEN.
    *> If the parent element is a list, update its type and count.
    IF LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
        MOVE X"07" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    ELSE
        *> Write the tag.
        MOVE X"07" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
        ADD 1 TO LK-NBTENC-OFFSET
        IF LK-NAME IS NOT OMITTED
            CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
        END-IF
    END-IF

    *> array length
    CALL "Encode-Int" USING LK-ARRAY-LEN LK-BUFFER LK-NBTENC-OFFSET

    *> Unless empty, push the array onto the stack.
    IF LK-ARRAY-LEN > 0
        ADD 1 TO LK-NBTENC-LEVEL
        MOVE X"07" TO LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL)
        MOVE X"01" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        MOVE LK-ARRAY-LEN TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    END-IF

    GOBACK.

END PROGRAM NbtEncode-ByteArray.

*> --- NbtEncode-ByteBuffer ---
*> This is a utility subroutine that writes a byte array with content directly.
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-ByteBuffer.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-DATA          PIC X ANY LENGTH.
    01 LK-DATA-LEN      BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-DATA LK-DATA-LEN.
    IF LK-NAME IS OMITTED
        CALL "NbtEncode-ByteArray" USING LK-NBTENC LK-BUFFER OMITTED LK-DATA-LEN
    ELSE
        CALL "NbtEncode-ByteArray" USING LK-NBTENC LK-BUFFER LK-NAME LK-DATA-LEN
    END-IF
    MOVE LK-DATA(1:LK-DATA-LEN) TO LK-BUFFER(LK-NBTENC-OFFSET:LK-DATA-LEN)
    ADD LK-DATA-LEN TO LK-NBTENC-OFFSET
    SUBTRACT 1 FROM LK-NBTENC-LEVEL
    GOBACK.

END PROGRAM NbtEncode-ByteBuffer.

*> --- NbtEncode-List ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-List.

DATA DIVISION.
WORKING-STORAGE SECTION.
    01 LIST-LENGTH      BINARY-LONG UNSIGNED        VALUE 0.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME.
    *> If the parent element is a list, update its type and count.
    IF LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
        MOVE X"09" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    ELSE
        *> Write the tag.
        MOVE X"09" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
        ADD 1 TO LK-NBTENC-OFFSET
        IF LK-NAME IS NOT OMITTED
            CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
        END-IF
    END-IF

    *> Push the list onto the stack.
    ADD 1 TO LK-NBTENC-LEVEL
    MOVE X"09" TO LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL)
    MOVE LK-NBTENC-OFFSET TO LK-NBTENC-STACK-INDEX(LK-NBTENC-LEVEL)
    MOVE X"00" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
    MOVE 0 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)

    *> value type and count are initially 0; they are set when ending the list.
    MOVE X"00" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
    ADD 1 TO LK-NBTENC-OFFSET
    CALL "Encode-Int" USING LIST-LENGTH LK-BUFFER LK-NBTENC-OFFSET

    GOBACK.

END PROGRAM NbtEncode-List.

*> --- NbtEncode-EndList ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-EndList.

DATA DIVISION.
WORKING-STORAGE SECTION.
    01 TEMP-OFFSET      BINARY-LONG UNSIGNED.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER.
    COPY ASSERT REPLACING COND BY ==LK-NBTENC-LEVEL >= 1 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"==,
        MSG BY =="NbtEncode-EndList: Missing list start tag"==.

    *> Fix up the list type and value count.
    MOVE LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL) TO LK-BUFFER(LK-NBTENC-STACK-INDEX(LK-NBTENC-LEVEL):1)
    COMPUTE TEMP-OFFSET = LK-NBTENC-STACK-INDEX(LK-NBTENC-LEVEL) + 1
    CALL "Encode-Int" USING LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL) LK-BUFFER TEMP-OFFSET

    *> Pop the list from the stack.
    SUBTRACT 1 FROM LK-NBTENC-LEVEL

    GOBACK.

END PROGRAM NbtEncode-EndList.

*> --- NbtEncode-Compound ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-Compound.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME.
    *> If the parent element is a list, update its type and count.
    IF LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
        MOVE X"0A" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    ELSE
        *> Write the tag.
        MOVE X"0A" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
        ADD 1 TO LK-NBTENC-OFFSET
        IF LK-NAME IS NOT OMITTED
            CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
        END-IF
    END-IF

    *> Push the compound onto the stack.
    ADD 1 TO LK-NBTENC-LEVEL
    MOVE X"0A" TO LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL)

    GOBACK.

END PROGRAM NbtEncode-Compound.

*> --- NbtEncode-RootCompound ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-RootCompound.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER.
    COPY ASSERT REPLACING COND BY ==LK-NBTENC-LEVEL = 0==,
        MSG BY =="NbtEncode-RootCompound: Must be at level 0"==.

    *> The root compound is a special case of the named compound.
    *> It wraps all save data on disk. However, it isn't used on the network.
    MOVE X"0A" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
    MOVE X"00" TO LK-BUFFER(LK-NBTENC-OFFSET + 1:1)
    MOVE X"00" TO LK-BUFFER(LK-NBTENC-OFFSET + 2:1)
    ADD 3 TO LK-NBTENC-OFFSET

    *> Push the root compound onto the stack.
    ADD 1 TO LK-NBTENC-LEVEL
    MOVE X"0A" TO LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL)

    GOBACK.

END PROGRAM NbtEncode-RootCompound.

*> --- NbtEncode-EndCompound ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-EndCompound.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER.
    COPY ASSERT REPLACING COND BY ==LK-NBTENC-LEVEL >= 1 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"0A"==,
        MSG BY =="NbtEncode-EndCompound: Missing compound start tag"==.

    *> Write the end tag.
    MOVE X"00" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
    ADD 1 TO LK-NBTENC-OFFSET

    *> Pop the compound from the stack.
    SUBTRACT 1 FROM LK-NBTENC-LEVEL

    GOBACK.

END PROGRAM NbtEncode-EndCompound.

*> --- NbtEncode-IntArray ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-IntArray.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-ARRAY-LEN     BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-ARRAY-LEN.
    *> If the parent element is a list, update its type and count.
    IF LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
        MOVE X"0B" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    ELSE
        *> Write the tag.
        MOVE X"0B" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
        ADD 1 TO LK-NBTENC-OFFSET
        IF LK-NAME IS NOT OMITTED
            CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
        END-IF
    END-IF

    *> array length
    CALL "Encode-Int" USING LK-ARRAY-LEN LK-BUFFER LK-NBTENC-OFFSET

    *> Unless empty, push the array onto the stack.
    IF LK-ARRAY-LEN > 0
        ADD 1 TO LK-NBTENC-LEVEL
        MOVE X"0B" TO LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL)
        MOVE X"03" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        MOVE LK-ARRAY-LEN TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    END-IF

    GOBACK.

END PROGRAM NbtEncode-IntArray.

*> --- NbtEncode-LongArray ---
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-LongArray.

DATA DIVISION.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-ARRAY-LEN     BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-ARRAY-LEN.
    *> If the parent element is a list, update its type and count.
    IF LK-NBTENC-LEVEL > 0 AND LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL) = X"09"
        MOVE X"0C" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        ADD 1 TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    ELSE
        *> Write the tag.
        MOVE X"0C" TO LK-BUFFER(LK-NBTENC-OFFSET:1)
        ADD 1 TO LK-NBTENC-OFFSET
        IF LK-NAME IS NOT OMITTED
            CALL "NbtEncode-WriteString" USING LK-BUFFER LK-NBTENC-OFFSET LK-NAME
        END-IF
    END-IF

    *> array length
    CALL "Encode-Int" USING LK-ARRAY-LEN LK-BUFFER LK-NBTENC-OFFSET

    *> Unless empty, push the array onto the stack.
    IF LK-ARRAY-LEN > 0
        ADD 1 TO LK-NBTENC-LEVEL
        MOVE X"0C" TO LK-NBTENC-STACK-TYPE(LK-NBTENC-LEVEL)
        MOVE X"04" TO LK-NBTENC-STACK-LIST-TYPE(LK-NBTENC-LEVEL)
        MOVE LK-ARRAY-LEN TO LK-NBTENC-STACK-LIST-COUNT(LK-NBTENC-LEVEL)
    END-IF

    GOBACK.

END PROGRAM NbtEncode-LongArray.

*> --- NbtEncode-UUID ---
*> While there is no NBT tag for UUIDs, they are commonly stored as an array of 4 integers, for which this subroutine
*> is provided.
IDENTIFICATION DIVISION.
PROGRAM-ID. NbtEncode-UUID.

DATA DIVISION.
WORKING-STORAGE SECTION.
    01 INT-COUNT        BINARY-LONG UNSIGNED                VALUE 4.
    01 UUID-OFFSET      BINARY-LONG UNSIGNED.
    01 INT32-BYTES.
        02 INT32        BINARY-LONG.
LINKAGE SECTION.
    COPY DD-NBT-ENCODER REPLACING LEADING ==NBTENC== BY ==LK-NBTENC==.
    01 LK-BUFFER        PIC X ANY LENGTH.
    01 LK-NAME          PIC X ANY LENGTH.
    01 LK-UUID          PIC X(16).

PROCEDURE DIVISION USING LK-NBTENC LK-BUFFER OPTIONAL LK-NAME LK-UUID.
    *> The following check may seem redundant, but without it, GnuCOBOL won't compile.
    IF LK-NAME IS OMITTED
        CALL "NbtEncode-IntArray" USING LK-NBTENC LK-BUFFER OMITTED INT-COUNT
    ELSE
        CALL "NbtEncode-IntArray" USING LK-NBTENC LK-BUFFER LK-NAME INT-COUNT
    END-IF
    PERFORM VARYING UUID-OFFSET FROM 1 BY 4 UNTIL UUID-OFFSET > 16
        MOVE FUNCTION REVERSE(LK-UUID(UUID-OFFSET:4)) TO INT32-BYTES
        CALL "NbtEncode-Int" USING LK-NBTENC LK-BUFFER OMITTED INT32
    END-PERFORM
    GOBACK.

END PROGRAM NbtEncode-UUID.
