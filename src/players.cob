*> --- Players-Init ---
IDENTIFICATION DIVISION.
PROGRAM-ID. Players-Init.

DATA DIVISION.
WORKING-STORAGE SECTION.
    *> shared data
    COPY DD-PLAYERS.
    *> temporary data
    01 PLAYER-INDEX             BINARY-CHAR.
    01 PLAYER-INVENTORY-INDEX   BINARY-CHAR.

PROCEDURE DIVISION.
    PERFORM VARYING PLAYER-INDEX FROM 1 BY 1 UNTIL PLAYER-INDEX > MAX-PLAYERS
        MOVE 0 TO PLAYER-CLIENT(PLAYER-INDEX)
        MOVE X"00000000000000000000000000000000" TO PLAYER-UUID(PLAYER-INDEX)
        MOVE SPACES TO PLAYER-NAME(PLAYER-INDEX)
        MOVE 0 TO PLAYER-NAME-LENGTH(PLAYER-INDEX)
        MOVE 0 TO PLAYER-X(PLAYER-INDEX)
        MOVE 64 TO PLAYER-Y(PLAYER-INDEX)
        MOVE 0 TO PLAYER-Z(PLAYER-INDEX)
        MOVE 0 TO PLAYER-YAW(PLAYER-INDEX)
        MOVE 0 TO PLAYER-PITCH(PLAYER-INDEX)
        PERFORM VARYING PLAYER-INVENTORY-INDEX FROM 1 BY 1 UNTIL PLAYER-INVENTORY-INDEX > 46
            MOVE 0 TO PLAYER-INVENTORY-SLOT-ID(PLAYER-INDEX, PLAYER-INVENTORY-INDEX)
            MOVE 0 TO PLAYER-INVENTORY-SLOT-COUNT(PLAYER-INDEX, PLAYER-INVENTORY-INDEX)
            MOVE 0 TO PLAYER-INVENTORY-SLOT-NBT-LENGTH(PLAYER-INDEX, PLAYER-INVENTORY-INDEX)
        END-PERFORM
        MOVE 0 TO PLAYER-HOTBAR(PLAYER-INDEX)
    END-PERFORM
    GOBACK.

END PROGRAM Players-Init.

*> --- Players-FindConnectedByUUID ---
IDENTIFICATION DIVISION.
PROGRAM-ID. Players-FindConnectedByUUID.

DATA DIVISION.
WORKING-STORAGE SECTION.
    *> shared data
    COPY DD-PLAYERS.
LINKAGE SECTION.
    01 LK-PLAYER-UUID           PIC X(16).
    01 LK-PLAYER-ID             BINARY-CHAR.

PROCEDURE DIVISION USING LK-PLAYER-UUID LK-PLAYER-ID.
    PERFORM VARYING LK-PLAYER-ID FROM 1 BY 1 UNTIL LK-PLAYER-ID > MAX-PLAYERS
        IF PLAYER-CLIENT(LK-PLAYER-ID) > 0 AND PLAYER-UUID(LK-PLAYER-ID) = LK-PLAYER-UUID
            GOBACK
        END-IF
    END-PERFORM
    *> not found
    MOVE 0 TO LK-PLAYER-ID
    GOBACK.

END PROGRAM Players-FindConnectedByUUID.

*> --- Players-Connect ---
IDENTIFICATION DIVISION.
PROGRAM-ID. Players-Connect.

DATA DIVISION.
WORKING-STORAGE SECTION.
    *> shared data
    COPY DD-PLAYERS.
LINKAGE SECTION.
    01 LK-CLIENT-ID             BINARY-LONG UNSIGNED.
    01 LK-PLAYER-UUID           PIC X(16).
    01 LK-PLAYER-NAME           PIC X(16).
    01 LK-PLAYER-NAME-LENGTH    BINARY-LONG UNSIGNED.
    *> resulting player id
    01 LK-PLAYER-ID             BINARY-CHAR.

PROCEDURE DIVISION USING LK-CLIENT-ID LK-PLAYER-UUID LK-PLAYER-NAME LK-PLAYER-NAME-LENGTH LK-PLAYER-ID.
    PERFORM VARYING LK-PLAYER-ID FROM 1 BY 1 UNTIL LK-PLAYER-ID > MAX-PLAYERS
        *> Use a previous slot for the same UUID, or an empty slot
        IF PLAYER-CLIENT(LK-PLAYER-ID) = 0 AND (PLAYER-UUID(LK-PLAYER-ID) = LK-PLAYER-UUID OR PLAYER-NAME-LENGTH(LK-PLAYER-ID) = 0)
            MOVE LK-CLIENT-ID TO PLAYER-CLIENT(LK-PLAYER-ID)
            MOVE LK-PLAYER-UUID TO PLAYER-UUID(LK-PLAYER-ID)
            MOVE LK-PLAYER-NAME(1:LK-PLAYER-NAME-LENGTH) TO PLAYER-NAME(LK-PLAYER-ID)
            MOVE LK-PLAYER-NAME-LENGTH TO PLAYER-NAME-LENGTH(LK-PLAYER-ID)
            GOBACK
        END-IF
    END-PERFORM
    *> no free player slots
    MOVE 0 TO LK-PLAYER-ID
    GOBACK.

END PROGRAM Players-Connect.

*> --- Players-Disconnect ---
IDENTIFICATION DIVISION.
PROGRAM-ID. Players-Disconnect.

DATA DIVISION.
WORKING-STORAGE SECTION.
    *> shared data
    COPY DD-PLAYERS.
LINKAGE SECTION.
    01 LK-PLAYER-ID             BINARY-CHAR.

PROCEDURE DIVISION USING LK-PLAYER-ID.
    MOVE 0 TO PLAYER-CLIENT(LK-PLAYER-ID).
    GOBACK.

END PROGRAM Players-Disconnect.
