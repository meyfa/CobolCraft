IDENTIFICATION DIVISION.
PROGRAM-ID. Codegen-TemplateRead.

DATA DIVISION.
WORKING-STORAGE SECTION.
    01 FILENAME                     PIC X(1024).
    01 FAILURE                      BINARY-CHAR UNSIGNED.
LINKAGE SECTION.
    01 LK-TPLDIR                    PIC X ANY LENGTH.
    01 LK-TPLNAME                   PIC X ANY LENGTH.
    01 LK-BUFFER                    PIC X ANY LENGTH.
    01 LK-LENGTH                    BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-TPLDIR LK-TPLNAME LK-BUFFER LK-LENGTH.
    INITIALIZE FILENAME
    STRING FUNCTION TRIM(LK-TPLDIR) "/" FUNCTION TRIM(LK-TPLNAME) INTO FILENAME

    CALL "Files-ReadAll" USING FILENAME LK-BUFFER LK-LENGTH FAILURE
    IF FAILURE NOT = 0
        DISPLAY "Codegen: Failed to read template: " FUNCTION TRIM(FILENAME) UPON STDERR
        STOP RUN RETURNING 1
    END-IF

    GOBACK.

END PROGRAM Codegen-TemplateRead.

IDENTIFICATION DIVISION.
PROGRAM-ID. Codegen-TemplateEval IS RECURSIVE.

DATA DIVISION.
LOCAL-STORAGE SECTION.
    01 IDX                          BINARY-LONG UNSIGNED.
    01 IDX2                         BINARY-LONG UNSIGNED.
    01 VARNAME                      PIC X(255).
    01 REPLACE-LENGTH               BINARY-LONG UNSIGNED.
LINKAGE SECTION.
    *> input template
    01 LK-TEMPLATE                  PIC X ANY LENGTH.
    01 LK-TEMPLATE-LENGTH           BINARY-LONG UNSIGNED.
    *> Callback: LK-VARNAME -> LK-VALUE, LK-LENGTH
    01 LK-REPLACE-PTR               PROGRAM-POINTER.
    *> output buffer
    01 LK-OUT-BUFFER                PIC X ANY LENGTH.
    01 LK-OUT-LENGTH                BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-TEMPLATE LK-TEMPLATE-LENGTH LK-REPLACE-PTR LK-OUT-BUFFER LK-OUT-LENGTH.
    MOVE 0 TO LK-OUT-LENGTH

    PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > LK-TEMPLATE-LENGTH
        IF LK-TEMPLATE(IDX:1) NOT = "$"
            MOVE LK-TEMPLATE(IDX:1) TO LK-OUT-BUFFER(LK-OUT-LENGTH + 1:1)
            ADD 1 TO LK-OUT-LENGTH
        ELSE
            *> find the closing "$"
            ADD 1 TO IDX
            PERFORM VARYING IDX2 FROM IDX BY 1 UNTIL IDX2 > LK-TEMPLATE-LENGTH
                IF LK-TEMPLATE(IDX2:1) = "$"
                    EXIT PERFORM
                END-IF
            END-PERFORM

            MOVE LK-TEMPLATE(IDX:IDX2 - IDX) TO VARNAME
            MOVE 0 TO REPLACE-LENGTH

            CALL LK-REPLACE-PTR USING VARNAME LK-OUT-BUFFER(LK-OUT-LENGTH + 1:) REPLACE-LENGTH
            ADD REPLACE-LENGTH TO LK-OUT-LENGTH

            MOVE IDX2 TO IDX
        END-IF
    END-PERFORM

    GOBACK.

END PROGRAM Codegen-TemplateEval.
