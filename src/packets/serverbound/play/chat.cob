IDENTIFICATION DIVISION.
PROGRAM-ID. RecvPacket-Chat.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-CLIENTS.
    COPY DD-PLAYERS.
    COPY DD-SERVER-PROPERTIES.
    COPY DD-CLIENT-STATES.
    01 PLAYER-ID                BINARY-LONG.
    *> payload
    01 MESSAGE-BUFFER           PIC X(256).
    01 MESSAGE-LENGTH           BINARY-LONG UNSIGNED.
    *> variables
    01 CLIENT-ID                BINARY-LONG UNSIGNED.
LINKAGE SECTION.
    01 LK-CLIENT                BINARY-LONG UNSIGNED.
    01 LK-BUFFER                PIC X ANY LENGTH.
    01 LK-OFFSET                BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-CLIENT LK-BUFFER LK-OFFSET.
    MOVE CLIENT-PLAYER(LK-CLIENT) TO PLAYER-ID

    CALL "Decode-String" USING LK-BUFFER LK-OFFSET MESSAGE-LENGTH MESSAGE-BUFFER

    IF MESSAGE-LENGTH > 256
        CALL "Server-DisconnectClient" USING LK-CLIENT
        GOBACK
    END-IF

    *> display the message in the server console
    DISPLAY "<" FUNCTION TRIM(PLAYER-NAME(PLAYER-ID)) "> " MESSAGE-BUFFER(1:MESSAGE-LENGTH)

    *> send the message to all clients in play state
    PERFORM VARYING CLIENT-ID FROM 1 BY 1 UNTIL CLIENT-ID > MAX-CLIENTS
        IF CLIENT-PRESENT(CLIENT-ID) = 1 AND CLIENT-STATE(CLIENT-ID) = CLIENT-STATE-PLAY
            CALL "SendPacket-PlayerChat" USING CLIENT-ID PLAYER-UUID(PLAYER-ID) PLAYER-NAME(PLAYER-ID) MESSAGE-BUFFER MESSAGE-LENGTH
        END-IF
    END-PERFORM

    GOBACK.

END PROGRAM RecvPacket-Chat.
