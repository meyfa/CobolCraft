IDENTIFICATION DIVISION.
PROGRAM-ID. RecvPacket-MovePlayerRot.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-CLIENTS.
    COPY DD-PLAYERS.
    01 PLAYER-ID                BINARY-LONG.
    01 FLAGS-BITSET             BINARY-CHAR.
    01 INPUT-ROTATION.
        02 INPUT-YAW            FLOAT-SHORT.
        02 INPUT-PITCH          FLOAT-SHORT.
    01 INPUT-FLAGS.
        02 INPUT-ON-GROUND      BINARY-CHAR.
        02 INPUT-AGAINST-WALL   BINARY-CHAR.
LINKAGE SECTION.
    01 LK-CLIENT                BINARY-LONG UNSIGNED.
    01 LK-BUFFER                PIC X ANY LENGTH.
    01 LK-OFFSET                BINARY-LONG UNSIGNED.

PROCEDURE DIVISION USING LK-CLIENT LK-BUFFER LK-OFFSET.
    MOVE CLIENT-PLAYER(LK-CLIENT) TO PLAYER-ID

    CALL "Decode-Float" USING LK-BUFFER LK-OFFSET INPUT-YAW
    CALL "Decode-Float" USING LK-BUFFER LK-OFFSET INPUT-PITCH

    *> on_ground = flags & 1 = flags % 2, against_wall = (flags >> 1) & 1 = flags / 2
    CALL "Decode-Byte" USING LK-BUFFER LK-OFFSET FLAGS-BITSET
    DIVIDE FLAGS-BITSET BY 2 GIVING INPUT-AGAINST-WALL REMAINDER INPUT-ON-GROUND

    *> ignore movement until position is confirmed
    IF TELEPORT-RECV(LK-CLIENT) NOT = TELEPORT-SENT(LK-CLIENT)
        GOBACK
    END-IF

    CALL "Players-HandleMove" USING PLAYER-ID OMITTED INPUT-ROTATION INPUT-FLAGS

    GOBACK.

END PROGRAM RecvPacket-MovePlayerRot.
