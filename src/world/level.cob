*> --- World-LevelFileName ---
IDENTIFICATION DIVISION.
PROGRAM-ID. World-LevelFileName.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-SERVER-PROPERTIES.
LINKAGE SECTION.
    01 LK-FILENAME              PIC X ANY LENGTH.

PROCEDURE DIVISION USING LK-FILENAME.
    INITIALIZE LK-FILENAME
    STRING FUNCTION TRIM(SP-LEVEL-NAME) "/level.dat" INTO LK-FILENAME
    GOBACK.

END PROGRAM World-LevelFileName.

*> --- World-SaveLevel ---
IDENTIFICATION DIVISION.
PROGRAM-ID. World-SaveLevel.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-WORLD.
    01 LEVEL-FILE-NAME          PIC X(1024).
    01 ERRNO                    BINARY-LONG.
    01 BUFFER                   PIC X(64000).
    01 BUFFER-LENGTH            BINARY-LONG UNSIGNED.
    01 COMPRESSED-BUFFER        PIC X(64000).
    01 COMPRESSED-LENGTH        BINARY-LONG UNSIGNED.
LOCAL-STORAGE SECTION.
    COPY DD-NBT-ENCODER.
LINKAGE SECTION.
    01 LK-FAILURE               BINARY-CHAR UNSIGNED.

PROCEDURE DIVISION USING LK-FAILURE.
    MOVE 0 TO LK-FAILURE
    MOVE ALL X"00" TO BUFFER

    *> root and "Data" compounds
    MOVE 1 TO NBTENC-OFFSET
    CALL "NbtEncode-RootCompound" USING NBTENC BUFFER
    CALL "NbtEncode-Compound" USING NBTENC BUFFER "Data"

    CALL "NbtEncode-Long" USING NBTENC BUFFER "Time" WORLD-AGE
    CALL "NbtEncode-Long" USING NBTENC BUFFER "DayTime" WORLD-TIME

    CALL "NbtEncode-Int" USING NBTENC BUFFER "SpawnX" WORLD-SPAWN-X
    CALL "NbtEncode-Int" USING NBTENC BUFFER "SpawnY" WORLD-SPAWN-Y
    CALL "NbtEncode-Int" USING NBTENC BUFFER "SpawnZ" WORLD-SPAWN-Z

    CALL "NbtEncode-Byte" USING NBTENC BUFFER "hardcore" WORLD-HARDCORE

    *> end "Data" and root compounds
    CALL "NbtEncode-EndCompound" USING NBTENC BUFFER
    CALL "NbtEncode-EndCompound" USING NBTENC BUFFER

    *> write the data to disk in gzip-compressed form
    COMPUTE BUFFER-LENGTH = NBTENC-OFFSET - 1
    MOVE LENGTH OF COMPRESSED-BUFFER TO COMPRESSED-LENGTH
    CALL "GzipCompress" USING BUFFER BUFFER-LENGTH COMPRESSED-BUFFER COMPRESSED-LENGTH GIVING ERRNO
    IF ERRNO NOT = 0
        MOVE 1 TO LK-FAILURE
        GOBACK
    END-IF

    CALL "World-LevelFileName" USING LEVEL-FILE-NAME
    CALL "Files-WriteAll" USING LEVEL-FILE-NAME COMPRESSED-BUFFER COMPRESSED-LENGTH LK-FAILURE

    GOBACK.

END PROGRAM World-SaveLevel.

*> --- World-LoadLevel ---
IDENTIFICATION DIVISION.
PROGRAM-ID. World-LoadLevel.

DATA DIVISION.
WORKING-STORAGE SECTION.
    *> File name and data
    01 LEVEL-FILE-NAME          PIC X(1024).
    01 ERRNO                    BINARY-LONG.
    01 COMPRESSED-BUFFER        PIC X(64000).
    01 COMPRESSED-LENGTH        BINARY-LONG UNSIGNED.
    01 BUFFER                   PIC X(64000).
    01 BUFFER-LENGTH            BINARY-LONG UNSIGNED.
    *> Temporary variables
    01 TAG                      PIC X(256).
    01 AT-END                   BINARY-CHAR UNSIGNED.
    *> World data
    COPY DD-WORLD.
LOCAL-STORAGE SECTION.
    COPY DD-NBT-DECODER.
LINKAGE SECTION.
    01 LK-FAILURE               BINARY-CHAR UNSIGNED.

PROCEDURE DIVISION USING LK-FAILURE.
    MOVE 0 TO LK-FAILURE

    *> Set defaults
    MOVE 0 TO WORLD-AGE WORLD-TIME
    MOVE 0 TO WORLD-SPAWN-X WORLD-SPAWN-Y WORLD-SPAWN-Z
    MOVE 0 TO WORLD-HARDCORE

    *> Read the file
    CALL "World-LevelFileName" USING LEVEL-FILE-NAME
    CALL "Files-ReadAll" USING LEVEL-FILE-NAME BUFFER BUFFER-LENGTH LK-FAILURE
    IF LK-FAILURE NOT = 0 OR BUFFER-LENGTH = 0
        GOBACK
    END-IF

    *> Check for the gzip magic number, and decompress if present
    IF BUFFER(1:2) = X"1F8B"
        MOVE BUFFER(1:BUFFER-LENGTH) TO COMPRESSED-BUFFER(1:BUFFER-LENGTH)
        MOVE BUFFER-LENGTH TO COMPRESSED-LENGTH
        MOVE LENGTH OF BUFFER TO BUFFER-LENGTH
        CALL "GzipDecompress" USING COMPRESSED-BUFFER COMPRESSED-LENGTH BUFFER BUFFER-LENGTH GIVING ERRNO
        IF ERRNO NOT = 0
            MOVE 1 TO LK-FAILURE
            GOBACK
        END-IF
    END-IF

    *> root tag containing the "Data" compound
    MOVE 1 TO NBTDEC-OFFSET
    CALL "NbtDecode-RootCompound" USING NBTDEC BUFFER
    CALL "NbtDecode-Compound" USING NBTDEC BUFFER

    PERFORM UNTIL EXIT
        CALL "NbtDecode-Peek" USING NBTDEC BUFFER AT-END TAG
        IF AT-END > 0
            EXIT PERFORM
        END-IF
        EVALUATE TAG
            WHEN "Time"
                CALL "NbtDecode-Long" USING NBTDEC BUFFER WORLD-AGE
            WHEN "DayTime"
                CALL "NbtDecode-Long" USING NBTDEC BUFFER WORLD-TIME
            WHEN "SpawnX"
                CALL "NbtDecode-Int" USING NBTDEC BUFFER WORLD-SPAWN-X
            WHEN "SpawnY"
                CALL "NbtDecode-Int" USING NBTDEC BUFFER WORLD-SPAWN-Y
            WHEN "SpawnZ"
                CALL "NbtDecode-Int" USING NBTDEC BUFFER WORLD-SPAWN-Z
            WHEN "hardcore"
                CALL "NbtDecode-Byte" USING NBTDEC BUFFER WORLD-HARDCORE
            WHEN OTHER
                CALL "NbtDecode-Skip" USING NBTDEC BUFFER
        END-EVALUATE
    END-PERFORM

    *> end of "Data" and root tags
    CALL "NbtDecode-EndCompound" USING NBTDEC BUFFER
    CALL "NbtDecode-EndCompound" USING NBTDEC BUFFER

    GOBACK.

END PROGRAM World-LoadLevel.

*> --- World-GetAge ---
IDENTIFICATION DIVISION.
PROGRAM-ID. World-GetAge.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-WORLD.
LINKAGE SECTION.
    01 LK-AGE                   BINARY-LONG-LONG.

PROCEDURE DIVISION USING LK-AGE.
    MOVE WORLD-AGE TO LK-AGE
    GOBACK.

END PROGRAM World-GetAge.

*> --- World-GetTime ---
IDENTIFICATION DIVISION.
PROGRAM-ID. World-GetTime.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-WORLD.
LINKAGE SECTION.
    01 LK-TIME                  BINARY-LONG-LONG.

PROCEDURE DIVISION USING LK-TIME.
    MOVE WORLD-TIME TO LK-TIME
    GOBACK.

END PROGRAM World-GetTime.

*> --- World-SetTime ---
IDENTIFICATION DIVISION.
PROGRAM-ID. World-SetTime.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-WORLD.
LINKAGE SECTION.
    01 LK-TIME                  BINARY-LONG-LONG.

PROCEDURE DIVISION USING LK-TIME.
    MOVE LK-TIME TO WORLD-TIME
    GOBACK.

END PROGRAM World-SetTime.

*> --- World-IsHardcore ---
IDENTIFICATION DIVISION.
PROGRAM-ID. World-IsHardcore.

DATA DIVISION.
WORKING-STORAGE SECTION.
    COPY DD-WORLD.
LINKAGE SECTION.
    01 LK-HARDCORE              BINARY-CHAR UNSIGNED.

PROCEDURE DIVISION USING LK-HARDCORE.
    MOVE WORLD-HARDCORE TO LK-HARDCORE
    GOBACK.

END PROGRAM World-IsHardcore.
